---
title: "Functions"
format: html
editor: visual
---

## Data Processing
Writing a function to input an API Url and then review it in our workspace.
```{r}
library(tidyverse)
library(httr)
usual_process <- function(URL) {
  id <- GET(URL)
  return(id)
}
```

Writing a function to take in the output of returned by GET() and create a tibble from it, assigning column names relevant to the data of interest.
```{r}
library(jsonlite)
helper <- function(id) {
  parsed_stats <- fromJSON(rawToChar(id$content))
  tibble <- as_tibble(parsed_stats)
  colnames(tibble) <- tibble[1,]
  tibble <- tibble[-1,]
  return(tibble)
}
```
Writing a function to query the Census API and also allow several variables to be specified within.
```{r}
census <- function(year = 2022, numvar = c("AGEP", "PWGTP"), catvar = "SEX", geog = "all", spec = NULL) {
  
  if(!(year %in% c(2010:2022))) {
    stop("Error: year not valid")
  } 
  
  numvalid <- c("AGEP", "GASP", "GRPIP", "JWAP", "JWDP", "JWMNP", "PWGTP")
  
  numvar <- unique(c(numvar, "PWGTP"))
  
  if(any(!(numvar %in% numvalid))) {
    stop("Error: numvar not valid")
  }
  numvar <- paste(numvar, collapse = ",")
  
  catvalid <- c("FER", "HHL", "HISPEED", "JWTRNS", "SCH", "SCHL", "SEX")
  
  if(any(!(catvar %in% catvalid))) {
    stop("Error: catvar not valid")
  }
  
  if(length(catvar) == 0) {
    stop("Error: at least one catvar must be specified")
  }
  catvar <- paste(catvar, collapse = ",")
  
  geogvalid <- c("all", "region", "division", "state")
  
  if(any(!(geog %in% geogvalid))) {
    stop("Error: geog not valid")
  }
  
  
  
  url <- paste("https://api.census.gov/data", as.character(year),"acs/acs1/pums?get=", sep = "/")
  url <- paste0(url, numvar) 
  url <- paste(url, catvar, sep = ",") 
  url <- paste0(url, "&for=", geog)
  
  #id <- usual_process(url)
  #tibble <- helper(id)
    
  return(url)
}
census()
```

---
title: "Functions"
format: html
editor: visual
---

## Data Processing
Writing a function to input an API Url and then review it in our workspace.
```{r}
library(tidyverse)
library(httr)
usual_process <- function(URL) {
  id <- GET(URL)
  return(id)
}
```

Writing a function to take in the output of returned by GET() and create a tibble from it, assigning column names relevant to the data of interest.
```{r}
library(jsonlite)
helper <- function(id) {
  parsed_stats <- fromJSON(rawToChar(id$content))
  tibble <- as_tibble(parsed_stats)
  colnames(tibble) <- tibble[1,]
  tibble <- tibble[-1,]
  return(tibble)
}
```
Writing a function to query the Census API and also allow several variables to be specified within.
```{r}
#setting up function with default arguments
census <- function(year = 2022, num_var = c("AGEP", "PWGTP"), cat_var = "SEX", geog = "all", spec = NULL) {
  
  #checking for valid year
  if(!(year %in% c(2010:2022))) {
    stop("Error: year not valid")
  } 
  
  #describing valid numeric variables
  num_valid <- c("AGEP", "GASP", "GRPIP", "JWAP", "JWDP", "JWMNP", "PWGTP")
  
  #ensuring the PWGTP is always returned
  num_var <- unique(c(num_var, "PWGTP"))
  
  #checking for valid numeric variables, then cleaning it up to be easily added to url
  if(any(!(num_var %in% num_valid))) {
    stop("Error: numvar not valid")
  }
  num_var <- paste(num_var, collapse = ",")
  
  #describing valid categorical variables
  cat_valid <- c("FER", "HHL", "HISPEED", "JWTRNS", "SCH", "SCHL", "SEX")
  
  #checking for valid categorical variables
  if(any(!(cat_var %in% cat_valid))) {
    stop("Error: catvar not valid")
  }
  
  #ensuring at least one catvar is returned, then cleaning variable up to be easily added to url
  if(length(cat_var) == 0) {
    stop("Error: at least one catvar must be specified")
  }
  cat_var <- paste(cat_var, collapse = ",")
  
  #describing valid geographical levels
  geog_valid <- c("all", "region", "division", "state")
  
  #checking for valid geographical levels
  if(any(!(geog %in% geog_valid))) {
    stop("Error: geog not valid")
  }
  
  
  #creating url from various arguments for census api
  url <- paste("https://api.census.gov/data", as.character(year),"acs/acs1/pums?get=", sep = "/") |>
    paste0(num_var) |>
    paste(cat_var, sep = ",") |>
    paste0("&for=", geog)
  
  #GET function from first problem
  #id <- usual_process(url)
  
  #helper function from second problem to create tibble 
  #tibble <- helper(id)
  
  #converts JWAP and JWDP variables to time, other variables in num_var to numeric
  #tibble <- tibble |> 
    #mutate(across(any_of(c("JWAP", "JWDP")), as.POSIXct())) |>
    #mutate(across(any_of(c("AGEP", "GASP", "GRPIP", "JWMNP", "PWGTP")), as.numeric()))
  
  return(url)
}
census()
```

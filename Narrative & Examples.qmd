---
title: "Project 1: Narrative & Examples"
format: html
editor: visual
---

## Data Processing

The purpose of all of the code that is included in this narrative is to highlight examples of and to utilize functions created in the Function Code.qmd file of this project to both query the US Census API, as well as output the information contained within into a convenient tibble format, while allowing the user to specify several endpoints of interest within the requested region/geographical subset. We start by importing all of the necessary packages for these functions, then creating a function that takes any general URL (In this example the URL for the 2022 Census Microdata API from Census.gov) and then outputting the result of the GET() function as our URL_id object. This function will be utilized within future functions to quickly transform the URL that has been built to the user's specifications. After looking at its structure we can see that the raw data is in the content element.

```{r}
library(tidyverse)
library(httr)
library(jsonlite)

URL_id <- usual_process("https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&SCHL=24")
URL_id
str(URL_id, max.level = 1)
```

Next, we take the output of the GET() function (same output as function above) and turn it into a tibble by creating and using a helper function. This function both creates a tibble as well as assigns names that correspond to the requested data. This function was also used within future functions to quickly return the data in the tibble format, from which various edits on the data type in each column can be performed.

```{r}
Census_2022 <- helper(URL_id) 
Census_2022
```

The census() function will build a URL based on variables specified within the function and then query the API and output the requested data as a neat tibble with appropriate data types. The following example highlights the data type coercion built into this function. For example, the time column JWAP has many NA values of JWAP because the JWAP variable (time of arrival for work) value in the API is a number code, in which 0 corresponds to either unemployed individuals or someone who is working from home, so a time of arrival for work is not applicable in this case. To help prevent excess burden on loading data, a geographical subset was added and assigned to state 20, which is the census code for the state of Kansas.

```{r}
census(num_var = c("AGEP", "JWAP"))
```

If we want to look at a range of years, the census_year_range function calls the census function once for each year of interest, then merges these tibbles into one with a year variable. Every year within the range of valid years for the census function applies, except 2020 as there is no census API for that year. In this example we chose the years 2022, which is the default year call in census, plus the year 2021. The resulting tibble is considerably larger (58,897 rows vs 28,957 rows) than the previous example of the use of the census function due to the inclusion of two years of data.

```{r}
census_year_range(years = (c(2021, 2022)))
```

## Investigation Using the Created Functions

The purpose of this section is show how the summary function and plot function defined in the Function Code.qmd file can be used to generate weighted summaries as well as a generic boxplot from the census() tibble created from the API above. We are able to grab data from the census api, run weighted summaries (means and standard deviations) using PWGTP, and from that we are able to make a simple weighted boxplot.

```{r}
#Necessary Packages
library(tidyverse)
library(ggplot2)
```

To demonstrate the use of the functions created, we are going to grab a small demo set to use these functions on.

```{r}
mydata <- census(
  year = 2022,
  num_var = c("AGEP", "JWMNP"),
  cat_var = "SEX",
  geog = "state",
  spec = "20"
)

class(mydata)
mydata
```

We are going to use the created summary function to summarize all the numeric columns except for PWGTP to get a named list. It is a numeric table of weighted means/standard deviations (excluding PWGTP) and a categorical table of the weighted counts. By default it summarizes are the numeric columns in the tibble but we can select specific columns when we want to trim our focus.

```{r}
#Numeric (except for PWGTP)
output <- summary.function(mydata)
head(output$numeric)
head(output$categorical)

#Specific Numerical Summary
AGEP_Specific <- summary.function(mydata, num_var = "AGEP", cat_var = "SEX")
AGEP_Specific$numeric
```

For visual representation, we use a created plot function which will always produce a boxplot. The variables are passed as strings using named arguments. The plot function below uses sex as the categorical variable and AGEP as the numeric variable.

```{r}
plot(mydata, "SEX", "AGEP")
```
